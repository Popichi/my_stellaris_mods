namespace = tvc

# spawn the Veiled Cluster
country_event = {
	id = tvc.1
	hide_window = yes

	is_triggered_only = yes

	fire_only_once = yes

	immediate = {
		set_spawn_system_batch = begin
		# batch-processes the spawn_system effects between "begin" and "end",
		# so caches are recalculated only once rather than for every system spawned
		# can also be used when removing and adding hyperlanes

		# Spawn the center of the decagon>
		no_scope = {
			# "no_scope" makes system positions originate from galactic core.
			spawn_system = {
				min_distance >= 550
				max_distance <= 560
				min_orientation_angle = 224
				max_orientation_angle = 226
				initializer = tvc_home_system_initializer
				hyperlane = no
				effect = {
					save_global_event_target_as = tvc_home_system_1
				}
			}

			# We spawn the edges of the decagon in relation to the center of the decagon. This 
			# is achieved by spawning the edge systems within the scope of the decagon center as 
			# "event_target:tvc_home_system_1 = { ... }"
			event_target:tvc_home_system_1 = {
				spawn_system = {
					min_distance >= 20
					max_distance <= 20
					min_orientation_angle = 0
					max_orientation_angle = 0
					initializer = tvc_system_2
					hyperlane = no
					effect = {
						save_global_event_target_as = tvc_system_2
					}
				}
				spawn_system = {
					min_distance >= 20
					max_distance <= 20
					min_orientation_angle = 36
					max_orientation_angle = 36
					initializer = tvc_system_3
					hyperlane = no
					effect = {
						save_global_event_target_as = tvc_system_3
					}
				}
				spawn_system = {
					min_distance >= 20
					max_distance <= 20
					min_orientation_angle = 72
					max_orientation_angle = 72
					initializer = tvc_system_4
					hyperlane = no
					effect = {
						save_global_event_target_as = tvc_system_4
					}
				}
				spawn_system = {
					min_distance >= 20
					max_distance <= 20
					min_orientation_angle = 108
					max_orientation_angle = 108
					initializer = tvc_system_5
					hyperlane = no
					effect = {
						save_global_event_target_as = tvc_system_5
					}
				}
				spawn_system = {
					min_distance >= 20
					max_distance <= 20
					min_orientation_angle = 144
					max_orientation_angle = 144
					initializer = tvc_system_6
					hyperlane = no
					effect = {
						save_global_event_target_as = tvc_system_6
					}
				}
				spawn_system = {
					min_distance >= 20
					max_distance <= 20
					min_orientation_angle = 180
					max_orientation_angle = 180
					initializer = tvc_system_7
					hyperlane = no
					effect = {
						save_global_event_target_as = tvc_system_7
					}
				}
				spawn_system = {
					min_distance >= 20
					max_distance <= 20
					min_orientation_angle = 216
					max_orientation_angle = 216
					initializer = tvc_system_8
					hyperlane = no
					effect = {
						save_global_event_target_as = tvc_system_8
					}
				}
				spawn_system = {
					min_distance >= 20
					max_distance <= 20
					min_orientation_angle = 252
					max_orientation_angle = 252
					initializer = tvc_system_9
					hyperlane = no
					effect = {
						save_global_event_target_as = tvc_system_9
					}
				}
				spawn_system = {
					min_distance >= 20
					max_distance <= 20
					min_orientation_angle = 288
					max_orientation_angle = 288
					initializer = tvc_system_10
					hyperlane = no
					effect = {
						save_global_event_target_as = tvc_system_10
					}
				}
				spawn_system = {
					min_distance >= 20
					max_distance <= 20
					min_orientation_angle = 324
					max_orientation_angle = 324
					initializer = tvc_system_11
					hyperlane = no
					effect = {
						save_global_event_target_as = tvc_system_11
					}
				}
			}

			# We spawn the wormhole system to the right of TVC system 2.
			event_target:tvc_system_2 = {
				spawn_system = {
					min_distance >= 20
					max_distance <= 20
					min_orientation_angle = 0
					max_orientation_angle = 0
					initializer = tvc_wormhole_system
					hyperlane = no
					effect = {
						save_global_event_target_as = tvc_wormhole_system
					}
				}
			}
		}

		# Add hyperlanes
		# The edges of the decagon are connected to the center i.e. the home system and the 
		# previous edge i.e. the previously spawned system. This is true for all systems except 
		# the last edge of the decagon that is spawned because that one will be connected to the 
		# first edge of the decagon that was previously spawned.

		# Hyperlane connections for TVC system 2
		# It's hyperlane connection to another edge of the decagon is added while adding the 
		# hyperlane connections for TVC system 10
		event_target:tvc_home_system_1 = {
			add_hyperlane = {
				from = event_target:tvc_home_system_1
				to = event_target:tvc_system_2
			}
		}

		# Hyperlane connections for TVC system 3
		event_target:tvc_home_system_1 = {
			add_hyperlane = {
				from = event_target:tvc_home_system_1
				to = event_target:tvc_system_3
			}
		}
		event_target:tvc_system_2 = {
			add_hyperlane = {
				from = event_target:tvc_system_2
				to = event_target:tvc_system_3
			}
		}

		# Hyperlane connections for TVC system 4
		event_target:tvc_home_system_1 = {
			add_hyperlane = {
				from = event_target:tvc_home_system_1
				to = event_target:tvc_system_4
			}
		}
		event_target:tvc_system_3 = {
			add_hyperlane = {
				from = event_target:tvc_system_3
				to = event_target:tvc_system_4
			}
		}

		# Hyperlane connections for TVC system 5
		event_target:tvc_home_system_1 = {
			add_hyperlane = {
				from = event_target:tvc_home_system_1
				to = event_target:tvc_system_5
			}
		}
		event_target:tvc_system_4 = {
			add_hyperlane = {
				from = event_target:tvc_system_4
				to = event_target:tvc_system_5
			}
		}

		# Hyperlane connections for TVC system 6
		event_target:tvc_home_system_1 = {
			add_hyperlane = {
				from = event_target:tvc_home_system_1
				to = event_target:tvc_system_6
			}
		}
		event_target:tvc_system_5 = {
			add_hyperlane = {
				from = event_target:tvc_system_5
				to = event_target:tvc_system_6
			}
		}

		# Hyperlane connections for TVC system 7
		event_target:tvc_home_system_1 = {
			add_hyperlane = {
				from = event_target:tvc_home_system_1
				to = event_target:tvc_system_7
			}
		}
		event_target:tvc_system_6 = {
			add_hyperlane = {
				from = event_target:tvc_system_6
				to = event_target:tvc_system_7
			}
		}

		# Hyperlane connections for TVC system 8
		event_target:tvc_home_system_1 = {
			add_hyperlane = {
				from = event_target:tvc_home_system_1
				to = event_target:tvc_system_8
			}
		}
		event_target:tvc_system_7 = {
			add_hyperlane = {
				from = event_target:tvc_system_7
				to = event_target:tvc_system_8
			}
		}

		# Hyperlane connections for TVC system 9
		event_target:tvc_home_system_1 = {
			add_hyperlane = {
				from = event_target:tvc_home_system_1
				to = event_target:tvc_system_9
			}
		}
		event_target:tvc_system_8 = {
			add_hyperlane = {
				from = event_target:tvc_system_8
				to = event_target:tvc_system_9
			}
		}

		# Hyperlane connections for TVC system 10
		event_target:tvc_home_system_1 = {
			add_hyperlane = {
				from = event_target:tvc_home_system_1
				to = event_target:tvc_system_10
			}
		}
		event_target:tvc_system_9 = {
			add_hyperlane = {
				from = event_target:tvc_system_9
				to = event_target:tvc_system_10
			}
		}

		# Hyperlane connections for TVC system 10
		# Since this is the last system that is spawned as an edge of the decagon, we connect 
		# it to system that was first spawned as an edge of the decagon as well.
		event_target:tvc_home_system_1 = {
			add_hyperlane = {
				from = event_target:tvc_home_system_1
				to = event_target:tvc_system_11
			}
		}
		event_target:tvc_system_10 = {
			add_hyperlane = {
				from = event_target:tvc_system_10
				to = event_target:tvc_system_11
			}
		}
		event_target:tvc_system_2 = {
			add_hyperlane = {
				from = event_target:tvc_system_2
				to = event_target:tvc_system_11
			}
		}

		# Hyperlane connections for TVC wormhole system
		event_target:tvc_system_2 = {
			add_hyperlane = {
				from = event_target:tvc_system_2
				to = event_target:tvc_wormhole_system
			}
		}
		set_spawn_system_batch = end

		country_event = { id = tvc.2 }
	}
}